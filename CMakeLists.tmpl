{% for toolchain in toolchains %}
include(toolchains/{{ toolchain }}.cmake)
{% endfor %}
cmake_minimum_required( VERSION {{ cmake_version }} )
project(
  {{ project_name }}
  VERSION {{ project_version }}
  {%if lang == "cpp"%}
  LANGUAGES CXX
)
  {%endif%}
  {%if lang == "c"%}
  LANGUAGES C
)
  {%endif%}
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD {{ lang_version }})
include(cmake/CPM.cmake)

CPMAddPackage(
  NAME Ccache.cmake
  GITHUB_REPOSITORY TheLartians/Ccache.cmake
  VERSION 1.2
)
include(FetchContent)

{{packages()}}

file(GLOB_RECURSE SOURCES RELATIVE ${CMAKE_SOURCE_DIR}
  "src/**.cpp"
  "src/**.c"
  "src/**/**.cpp"
  "src/**/**.c"
)

message("Sources: ${SOURCES}")

SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} {% if flags %} {% for flag in flags %} {{ flag }} {% endfor %} {% endif %}")

include_directories($CMAKE_SOURCE_DIR/{{ include_dir }})
set(HEADER_DIR $CMAKE_SOURCE_DIR/{{ include_dir }})

if(NOT DEFINED RELEASE)
  set(RELEASE 0)
endif()

add_executable({{project_name}} ${SOURCES})
##for mode in modes
if (CMAKE_BUILD_TYPE STREQUAL "{{ mode.name }}")
  add_definitions(-D{{ mode.name }})
  {% for dep in mode.dependencies %}
  CPMAddPackage(
    NAME {{ dep.name }}
    GIT_REPOSITORY {{ dep.git }}
    GIT_TAG {{ dep.version }}
  )
  {% endfor %}
  set_target_properties({{project_name}} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS} {% for flag in mode.flags %} {{ flag }} {% endfor %}")
endif()
##endfor
set(BUILD_DIR {{ build_dir }})
set_target_properties({{project_name}} PROPERTIES RUNTIME_OUTPUT_DIRECTORY {{build_dir}})


##for dep in dependencies
target_link_libraries({{project_name}} {{dep.target_link}})
##endfor
install(TARGETS {{project_name}} DESTINATION bin)

